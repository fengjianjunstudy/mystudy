#header {
  width: 100%;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  height: 2.2rem;
  line-height: 2.2rem;
  overflow: hidden;
  position: absolute;
  top: 0;
  left: 0;
  padding: 0 0.375rem;
  background-color: #fff;
}
#header .logo {
  display: inline-block;
  width: 6.02rem;
  height: 2.2rem;
}
#header .logo img {
  vertical-align: middle;
}
#header .course_search {
  display: inline-block;
  width: 6.9rem;
  height: 1rem;
  border: 1px solid #b7b7b7;
  overflow: hidden;
  vertical-align: middle;
}
#header .course_search form {
  display: block;
}
#header .course_search form .course_input {
  border: none;
  width: 5.9rem;
  height: 1rem;
  outline: none;
  vertical-align: top;
}
#header .course_search form .course_submit {
  width: 0.7rem;
  height: 1rem;
  border: none;
  vertical-align: top;
}
#header .course_search form .search_tip {
  display: none;
}
#footer {
  width: 100%;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  height: 2.75rem;
  overflow: hidden;
  position: absolute;
  bottom: 0;
  left: 0;
  background-color: #fff;
  border-top: 1px solid #b7b7b7;
  border-bottom: 1px solid #b7b7b7;
}
#footer span {
  display: inline-block;
  width: 20%;
  height: 100%;
  text-align: center;
}
#footer span a span {
  display: inline-block;
  width: 2rem;
}
#footer span a span i {
  font-size: 1.2rem;
  vertical-align: middle;
}
#footer span a span span {
  vertical-align: middle;
}
.index_pannel {
  margin-bottom: 0.5rem;
  background-color: #fff;
}
.index_pannel .index_pannel_head {
  height: 1.75rem;
  line-height: 1.75rem;
}
.index_pannel .index_pannel_head h3 {
  float: left;
}
.index_pannel .index_pannel_head .more {
  float: right;
}
.index_pannel .index_pannel_content {
  overflow: hidden;
  width: 100%;
}
.index_pannel .index_pannel_content .single_line_content ul:nth-child(1) {
  padding-right: 0.375rem;
}
.index_pannel .index_pannel_content .single_line_content ul:nth-child(2) {
  padding-left: 0.375rem;
}
.index_pannel .index_pannel_content .single_line_content ul {
  width: 50%;
  float: left;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}
.index_pannel .index_pannel_content .single_line_content ul .img_li {
  width: 7.25rem;
  height: 4.95rem;
  position: relative;
  overflow: hidden;
}
.index_pannel .index_pannel_content .single_line_content ul .img_li .course_logo {
  position: absolute;
  -webkit-transform: rotate(-45deg) translate(50%, 50%);
  -ms-transform: rotate(-45deg) translate(50%, 50%);
  transform: rotate(-45deg) translate(50%, 50%);
  width: 100%;
  height: 1rem;
  left: 0;
  top: 1.975rem;
  text-align: center;
}
.index_pannel .index_pannel_content .single_line_content ul .img_li .course_logo_taocan {
  background-color: #f00;
}
.index_pannel .index_pannel_content .single_line_content ul .desc {
  line-height: 1rem;
  min-height: 2rem;
}
.index_pannel .index_pannel_content .single_line_content ul .price_li {
  height: 1rem;
}
.index_pannel {
  margin-bottom: 0.5rem;
  background-color: #fff;
}
.index_pannel .index_pannel_head {
  height: 1.75rem;
  line-height: 1.75rem;
}
.index_pannel .index_pannel_head h3 {
  float: left;
}
.index_pannel .index_pannel_head .more {
  float: right;
}
.index_pannel .index_pannel_content {
  overflow: hidden;
  width: 100%;
}
.index_pannel .index_pannel_content .teacher_list {
  height: 2.8rem;
  margin-bottom: 1rem;
  overflow: hidden;
}
.index_pannel .index_pannel_content .teacher_list .teacher_img {
  width: 2.8rem;
  height: 2.8rem;
  float: left;
  margin-right: 0.75rem;
}
.index_pannel .index_pannel_content .teacher_list dd {
  float: left;
  width: 11.25rem;
  line-height: 1rem;
}
.index_pannel .index_pannel_content .teacher_list .teacher_name,
.index_pannel .index_pannel_content .teacher_list .teacher_desc {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
.index_pannel .index_pannel_content .teacher_list .teacher_price .bule_price {
  margin-left: 1rem;
}
/*$modHeader()
$modFooter()*/
.banner {
  margin-bottom: 0.5rem;
}
.banner #tabPic {
  height: 6.25rem;
  overflow: hidden;
  position: relative;
/*width 100%*/
}
.banner #tabPic #picList {
  position: relative;
  width: 400%;
  height: 6.25rem;
}
.banner #tabPic #picList li {
  width: 25%;
  height: 100%;
  float: left;
}
.banner #tabPic #picList li img {
  height: 100%;
}
.banner #tabPic .picMask {
  position: absolute;
  left: 0;
  bottom: 0;
  width: 100%;
}
.banner #tabPic .picMask nav {
  position: absolute;
  right: 0.75rem;
  bottom: 0.4rem;
/*height 0.5rem*/
}
.banner #tabPic .picMask nav a {
  float: left;
  width: 0.5rem;
  height: 0.5rem;
  border-radius: 0.25rem;
  background: #fff;
  opacity: 0.5;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=50)";
  filter: alpha(opacity=50);
  margin-left: 0.6rem;
}
.banner #tabPic .picMask nav a.active {
  background: #f60;
  opacity: 1;
  -ms-filter: none;
  -webkit-filter: none;
          filter: none;
}

/*# sourceMappingURL=data:application/json;base64, */